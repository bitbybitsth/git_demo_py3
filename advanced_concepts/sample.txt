import re

from regular_expression import text_to_search



# Metacharchters

# \d      - Digit (0-9) - searches for numbers 0-9 in the string
# \D      - searches for anything except number -

# pattern = re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")
# pattern = re.compile(r"\d\d\d-\D\D\D-\d\d\d\d")
# match = pattern.findall(text_to_search)
# print(match)

#\w   -  Word charcter alphabet (a-z, A-Z,0-9, _)
#\W   - Not a word charcter
# pattern = re.compile(r"\W \W")
# match = pattern.findall(text_to_search)
# print(match)


# \s      - Whitespace (space, tab, newline)
# \S      - Not Whitespace (space, tab, newline)
# pattern = re.compile(r"\s")
# match = pattern.findall(text_to_search)
# print(match)

# . use case
# pattern = re.compile(r"\d\d\d.\w\w\w.\d\d\d\d")
# matches = pattern.findall(text_to_search)
# print(matches)


# * o or more
# pattern = re.compile(r"M\w*")
# match = pattern.findall(text_to_search)
# print(match)

# + 1 or more

# pattern = re.compile(r"Mr\w+")
# match = pattern.findall(text_to_search)
# print(match)

# ?  zero or 1

# pattern = re.compile(r"Mr\w?")
# match = pattern.findall(text_to_search)
# print(match)

# # {num} , exact number
# pattern = re.compile(r"\d{3}.\w{3}.\d{4}")
# match = pattern.findall(text_to_search)
# print(match)


# {n1,n2} number range separated by comma
pattern = re.compile(r"\d{1,3}.\w{1,3}.\d{1,4}")
match = pattern.findall(text_to_search)
print(match)

# need to pick all the ip address only, which is present in the text
# we need to escape the .
"""
192.12.10.3
168.3.212.55
1.2.3.67
10.23.4.78
"""
pattern = re.compile(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
match = pattern.findall(text_to_search)
print(match)

pattern = re.compile(r"\d\d\+\d\d\+\d\d")
match = pattern.findall(text_to_search)
print(match)

# pattern = re.compile(r"\d\d\*\d\d\*\d{1,4}")
# match = pattern.findall(text_to_search)
# print(match)


# [] Matches Characters in brackets,  [^] matches charcters not in brackets

# pattern = re.compile(r"BBB[^hijklm]\d+")  # aaa   abb abc baa bab
# match = pattern.findall(text_to_search)
# print(match)


# |   either/or

x = "there is no gain without pain"

pattern = re.compile(r"\d\d\+\d\d\+\d\d|\d\d\*\d\d\*\d{1,4}")
match = pattern.findall(text_to_search)
print(match)


for mat in match:
    print(eval(mat))


